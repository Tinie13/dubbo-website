<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 打包并部署应用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/</link><description>Recent content in 打包并部署应用 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 传统基于 Zookeeper、Nacos 的注册中心部署架构，部署 Dubbo 应用到虚拟机环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm/</guid><description>
&lt;p>下图是使用 Nacos、Zookeeper 作为注册中心的典型 Dubbo 微服务部署架构。&lt;/p>
&lt;img src="https://dubbo.apache.org/imgs/v3/manual/java/tutorial/kubernetes/kubernetes.png" style="max-width:650px;height:auto;" />
&lt;h2 id="安装-nacos">安装 Nacos&lt;/h2>
&lt;p>请参考以下文档了解如何在本地 &lt;a href="">安装 Nacos&lt;/a>。&lt;/p>
&lt;h2 id="部署应用">部署应用&lt;/h2>
&lt;p>我们仍然以 &lt;a href="">快速开始&lt;/a> 中的项目为例，演示应用打包部署的具体步骤。&lt;/p>
&lt;p>克隆示例项目到本地：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone -b main --depth &lt;span style="color:#2aa198">1&lt;/span> https://github.com/apache/dubbo-samples
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>切换到示例目录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">cd&lt;/span> dubbo-samples/11-quickstart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下是两种打包部署模式：&lt;/p>
&lt;h3 id="方式一本地进程">方式一：本地进程&lt;/h3>
&lt;p>本地打包进程：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ mvn clean package
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 Dubbo 进程：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ java -jar ./quickstart-service/target/quickstart-service-0.0.1-SNAPSHOT.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
为了程序正常运行，请确保 &lt;code>application.yml&lt;/code> 文件中的注册中心地址已经正确指向你想要的注册中心。
&lt;/div>
&lt;h3 id="方式二docker容器">方式二：docker容器&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ docker build -f ./Dockerfile -t quickstart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ docker run quickstart -p port1:port2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># 对于一些端口或连接注册中心的细节要写清楚&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;p>Docker 容器环境下，不同容器间用于网络通信的地址需要特别关注，因此你可能需要设置 Dubbo 进程监听或者注册到注册中心的地址，请参考以下链接了解更多内容。&lt;/p>
&lt;p>见 &lt;a href="https://github.com/apache/dubbo-samples/tree/master/2-advanced/dubbo-samples-docker">dubbo 通过环境变量设置 host&lt;/a>&lt;/p>
&lt;p>有些部署场景需要动态指定服务注册的地址，如 docker bridge 网络模式下要指定注册宿主机 ip 以实现外网通信。dubbo 提供了两对启动阶段的系统属性，用于设置对外通信的ip、port地址。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>DUBBO_IP_TO_REGISTRY&lt;/strong>：注册到注册中心的 ip 地址&lt;/li>
&lt;li>&lt;strong>DUBBO_PORT_TO_REGISTRY&lt;/strong>：注册到注册中心的 port 端口&lt;/li>
&lt;li>&lt;strong>DUBBO_IP_TO_BIND&lt;/strong>：监听 ip 地址&lt;/li>
&lt;li>&lt;strong>DUBBO_PORT_TO_BIND&lt;/strong>：监听 port 端口&lt;/li>
&lt;/ul>
&lt;p>以上四个配置项均为可选项，如不配置 dubbo 会自动获取 ip 与端口，请根据具体的部署场景灵活选择配置。
dubbo 支持多协议，如果一个应用同时暴露多个不同协议服务，且需要为每个服务单独指定 ip 或 port，请分别在以上属性前加协议前缀。 如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HESSIAN_DUBBO_PORT_TO_BIND&lt;/strong>：hessian 协议绑定的 port&lt;/li>
&lt;li>&lt;strong>DUBBO_DUBBO_PORT_TO_BIND&lt;/strong>：dubbo 协议绑定的 port&lt;/li>
&lt;li>&lt;strong>HESSIAN_DUBBO_IP_TO_REGISTRY&lt;/strong>：hessian 协议注册的 ip&lt;/li>
&lt;li>&lt;strong>DUBBO_DUBBO_IP_TO_REGISTRY&lt;/strong>：dubbo 协议注册的 ip&lt;/li>
&lt;/ul>
&lt;p>PORT_TO_REGISTRY 或 IP_TO_REGISTRY 不会用作默认 PORT_TO_BIND 或 IP_TO_BIND，但是反过来是成立的。如：&lt;/p>
&lt;ul>
&lt;li>设置 &lt;code>PORT_TO_REGISTRY=20881&lt;/code> 和 &lt;code>IP_TO_REGISTRY=30.5.97.6&lt;/code>，则 &lt;code>PORT_TO_BIND&lt;/code> 和 &lt;code>IP_TO_BIND&lt;/code> 不受影响&lt;/li>
&lt;li>设置 &lt;code>PORT_TO_BIND=20881&lt;/code> 和 &lt;code>IP_TO_BIND=30.5.97.6&lt;/code>，则默认 &lt;code>PORT_TO_REGISTRY=20881&lt;/code> 且 &lt;code>IP_TO_REGISTRY=30.5.97.6&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="查看部署状态">查看部署状态&lt;/h3>
&lt;p>安装并运行 dubbo-control-plane，查看本地服务部署状态：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载安装包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ curl -L https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/release/downloadDubbo.sh | sh -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">cd&lt;/span> dubbo-&lt;span style="color:#268bd2">$version&lt;/span>/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行以下命令，启动 dubbo-control-plane 进程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./dubbo-cp run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
为了 dubbo-control-plane 正常运行，请修改 &lt;code>conf/dubbo-cp.yml&lt;/code> 以确保其指向你想要的注册中心。
&lt;/div>
&lt;p>访问 &lt;code>http://xxx&lt;/code> 查看服务部署详情。&lt;/p>
&lt;h3 id="优雅上下线">优雅上下线&lt;/h3>
&lt;p>在使用传统注册中心的情况下，我们需要控制实例发布到注册中心、实例从注册中心摘除的时机，以实现优雅上下线：&lt;/p>
&lt;ol>
&lt;li>上线阶段，通过 &lt;a href="">延迟发布&lt;/a> 机制控制实例注册到注册中心的时机，通过开启 &lt;a href="">消费端预热&lt;/a> 确保流量缓慢的被转发到新节点上。&lt;/li>
&lt;li>下线阶段，通过配置 &lt;code>prestop&lt;/code> 确保先从注册中心摘除实例注册信息，之后再进入进程销毁过程。&lt;/li>
&lt;/ol>
&lt;p>在下线之前，建议调用以下 http 端口，先从注册中心摘除实例，然后再尝试停止进程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ curl http://offline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sleep &lt;span style="color:#2aa198">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">kill&lt;/span> dubbo-pid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Overview: 部署 Dubbo 应用到 Kubernetes 环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes/</guid><description>
&lt;p>这种模式与传统的非 Kubernetes 部署并无太大差异，如下图所示，仍然使用 Nacos 或者 Zookeeper 等作为注册中心，只不过将 Kubernetes 作为应用生命周期调度的底层平台。&lt;/p>
&lt;img src="https://dubbo.apache.org/imgs/v3/manual/java/tutorial/kubernetes/kubernetes.png" style="max-width:650px;height:auto;" />
&lt;h2 id="安装-nacos">安装 Nacos&lt;/h2>
&lt;p>在 Kubernetes 模式下，我们推荐使用 &lt;code>dubboctl&lt;/code> 快速安装 Nacos、dubbo-control-plane、prometheus 等组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>$ dubboctl install --profile=demo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;ol>
&lt;li>请查看 dubboctl 了解更多细节&lt;/li>
&lt;li>您也可以在此了解 Nacos 官方提供的 Kubernetes 集群安装方案&lt;/li>
&lt;/ol>
&lt;/div>
&lt;h2 id="部署应用">部署应用&lt;/h2>
&lt;p>我们仍然以 &lt;a href="">快速开始&lt;/a> 中的项目为例，演示应用打包部署的具体步骤。&lt;/p>
&lt;p>首先，克隆示例项目到本地：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git clone -b main --depth &lt;span style="color:#2aa198">1&lt;/span> https://github.com/apache/dubbo-samples
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>切换到示例目录：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#b58900">cd&lt;/span> dubbo-samples/11-quickstart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="打包镜像">打包镜像&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ dubboctl build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#586e75"># 具体写一下推送到 docker 仓库&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署">部署&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ dubboctl deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下是生成的完整 Kubernetes manifests：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以下命令，将应用部署到 Kubernetes 集群：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f xxx.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查看部署状态">查看部署状态&lt;/h3>
&lt;p>如果之前已经使用 &lt;code>dubboctl&lt;/code> 安装 dubbo-control-plane，则可以通过以下方式查看服务部署情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ kubectl port-forward
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;code>http://xxx&lt;/code> 查看服务部署详情。&lt;/p>
&lt;h3 id="优雅上下线">优雅上下线&lt;/h3>
&lt;p>如上面的架构图所示，我们仍然使用 Nacos 作为注册中心，因此，与传统 Linux 部署模式类似，控制实例发布到注册中心、实例从注册中心摘除的时机，是我们实现优雅上下线的关键：&lt;/p>
&lt;ol>
&lt;li>上线阶段，通过 &lt;a href="">延迟发布&lt;/a> 机制控制实例注册到注册中心的时机，通过开启 &lt;a href="">消费端预热&lt;/a> 确保流量缓慢的被转发到新节点上。&lt;/li>
&lt;li>下线阶段，通过配置 &lt;code>prestop&lt;/code> 确保先从注册中心摘除实例注册信息，之后再进入进程销毁过程。&lt;/li>
&lt;/ol>
&lt;p>优雅下线摘除实例的示例配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">preStop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">exec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">command&lt;/span>: [&lt;span style="color:#2aa198">&amp;#34;/bin/sh&amp;#34;&lt;/span>,&lt;span style="color:#2aa198">&amp;#34;-c&amp;#34;&lt;/span>,&lt;span style="color:#2aa198">&amp;#34;curl /offline; sleep 10&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
在这个模式下，由于 Dubbo 服务的发布与注销与注册中心强关联，因此与 Kubernetes 中的 liveness、readiness 关联并不大。在下一篇文档中，我们会讲到 Kubernetes Service 部署模式下如何配置 liveness、readiness。
&lt;/div></description></item><item><title>Overview: 部署 Dubbo 应用到虚拟机环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service/</guid><description>
&lt;p>这种模式将 Dubbo Service 与 &lt;a target="_blank" href="">Kubernetes Service&lt;/a> 概念映射起来，不再需要 Nacos 等传统注册中心，而是由 Kubernetes APISERVER 承担注册中心指责。&lt;/p>
&lt;img src="https://dubbo.apache.org/imgs/v3/manual/java/tutorial/kubernetes/kubernetes-service.png" style="max-width:650px;height:auto;" />
&lt;h2 id="安装-control-plane">安装 Control Plane&lt;/h2>
&lt;p>在这个模式下，我们需要安装 &lt;code>dubbo-control-plane&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>这里是要用 istio 配合一起工作（提供xds推送能力），还是dubbo-control-plane自己实现xds server？&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>dubboctl manifests install --profile=control-plane
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署应用">部署应用&lt;/h2>
&lt;h3 id="打包镜像">打包镜像&lt;/h3>
&lt;h3 id="定义-yaml">定义 YAML&lt;/h3>
&lt;p>请查看 dubbo-samples 了解示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">kind&lt;/span>: service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">kind&lt;/span>: deployment
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="优雅上下线">优雅上下线&lt;/h3>
&lt;p>配置 probe
配置 pre-stop&lt;/p>
&lt;h3 id="观测服务状态">观测服务状态&lt;/h3>
&lt;h2 id="与-service-mesh-的区别">与 Service Mesh 的区别&lt;/h2>
&lt;h2 id="特性说明">特性说明&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/">Pod 的生命周期&lt;/a> 与服务调度息息相关，通过对 Kubernetes 官方探针的实现，能够使 Dubbo3 乃至整个应用的生命周期与 Pod 的生命周期，在 Pod 的整个生命周期中，影响到 Pod 的就只有健康检查这一部分, 我们可以通过配置 liveness probe（存活探针）和 readiness probe（可读性探针）来影响容器的生命周期。&lt;/p>
&lt;p>通过 Dubbo3 的 SPI 机制，在内部实现多种“探针”，基于 Dubbo3 QOS 运维模块的 HTTP 服务，使容器探针能够获取到应用内对应探针的状态。另外，SPI 的实现机制也利于用户自行拓展内部“探针”，使整个应用的生命周期更有效的进行管控。&lt;/p>
&lt;p>&lt;strong>三种探针对应的 SPI 接口&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>livenessProbe: &lt;code>org.apache.dubbo.qos.probe.LivenessProbe&lt;/code>&lt;/li>
&lt;li>readinessProbe: &lt;code>org.apache.dubbo.qos.probe.ReadinessProbe&lt;/code>&lt;/li>
&lt;li>startupProbe: &lt;code>org.apache.dubbo.qos.probe.StartupProbe&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>接口将自动获取当前应用所有 SPI 的实现，对应接口的 SPI 实现均成功就绪则接口返回成功。&lt;/p>
&lt;p>Dubbo3 SPI 更多扩展的介绍见 &lt;a href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/">Dubbo SPI扩展&lt;/a>&lt;/p>
&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;p>&lt;code>liveness probe&lt;/code> 来确定你的应用程序是否正在运行，查看是否存活。&lt;/p>
&lt;p>&lt;code>readiness probe&lt;/code> 来确定容器是否已经就绪可以接收流量过来,是否准备就绪,是否可以开始工作。&lt;/p>
&lt;p>&lt;code>startup probe&lt;/code> 来确定容器内的应用程序是否已启动，如果提供了启动探测则禁用所有其他探测，直到它成功为止，如果启动探测失败则杀死容器，容器将服从其重启策略。如果容器没有提供启动探测，则默认状态为成功。&lt;/p>
&lt;h2 id="使用方式">使用方式&lt;/h2>
&lt;h3 id="存活检测">存活检测&lt;/h3>
&lt;p>对于 livenessProbe 存活检测，由于 Dubbo3 框架本身无法获取到应用的存活状态，因此本接口无默认实现，且默认返回成功。开发者可以根据 SPI 定义对此 SPI 接口进行拓展，从应用层次对是否存活进行判断。&lt;/p>
&lt;p>关于 &lt;a href="../../../reference-manual/spi/description/liveness/">liveness 存活探针&lt;/a> 扩展示例&lt;/p>
&lt;h3 id="就绪检测">就绪检测&lt;/h3>
&lt;p>对于 readinessProbe 就绪检测，目前 Dubbo3 默认提供了两个检测维度，一是对 Dubbo3 服务自身是否启停做判断，另外是对所有服务是否存在已注册接口，如果所有服务均已从注册中心下线（可以通过 QOS 运维进行操作）将返回未就绪的状态。&lt;/p>
&lt;p>关于 &lt;a href="../../../reference-manual/spi/description/readiness/">readiness 就绪探针&lt;/a> 扩展示例&lt;/p>
&lt;h3 id="启动检测">启动检测&lt;/h3>
&lt;p>对于 startupProbe 启动检测，目前 Dubbo3 默认提供了一个检测维度，即是在所有启动流程（接口暴露、注册中心写入等）均结束后返回已就绪状态。&lt;/p>
&lt;p>关于 &lt;a href="../../../reference-manual/spi/description/startup/">startup 启动探针&lt;/a> 扩展示例&lt;/p>
&lt;h3 id="参考示例">参考示例&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">livenessProbe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">httpGet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">path&lt;/span>: /live
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: &lt;span style="color:#2aa198">22222&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">initialDelaySeconds&lt;/span>: &lt;span style="color:#2aa198">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">periodSeconds&lt;/span>: &lt;span style="color:#2aa198">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">readinessProbe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">httpGet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">path&lt;/span>: /ready
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: &lt;span style="color:#2aa198">22222&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">initialDelaySeconds&lt;/span>: &lt;span style="color:#2aa198">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">periodSeconds&lt;/span>: &lt;span style="color:#2aa198">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">startupProbe&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">httpGet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">path&lt;/span>: /startup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: &lt;span style="color:#2aa198">22222&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">failureThreshold&lt;/span>: &lt;span style="color:#2aa198">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">periodSeconds&lt;/span>: &lt;span style="color:#2aa198">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>QOS 当计算节点检测到内存压力时，kuberentes 会 BestEffort -&amp;gt; Burstable -&amp;gt; Guaranteed 依次驱逐 Pod。&lt;/p>
&lt;/blockquote>
&lt;p>目前三种探针均有对应的接口，路径为 QOS 中的命令，端口信息请根据 QOS 配置进行对应修改（默认端口为 22222）。其他参数请参考 &lt;a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/">Kubernetes官方文档说明&lt;/a>。&lt;/p></description></item></channel></rss>