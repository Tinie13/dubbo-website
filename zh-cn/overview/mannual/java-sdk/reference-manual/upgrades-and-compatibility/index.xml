<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 升级和兼容性</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/</link><description>Recent content in 升级和兼容性 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 从 dubbo2 升级到 dubbo3（涵盖 2.5.x、2.6.x、2.7.x 等版本）</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration/</guid><description>
&lt;p>总体来说，Dubbo2 升级到 Dubbo3 后的核心能力都是兼容的，对于 90% 以上的常规用户而言（指未做深度 SPI 扩展或源码定制的用户），可以非常简单的完成升级。&lt;/p>
&lt;h2 id="27x-升级-dubbo3">2.7.x 升级 Dubbo3&lt;/h2>
&lt;h3 id="步骤一升级核心依赖">步骤一：升级核心依赖&lt;/h3>
&lt;p>首先，在应用中增加 bom 依赖管理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-dependencies-bom&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;version&amp;gt;&lt;/span>3.3.0&lt;span style="color:#268bd2">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span style="color:#268bd2">&amp;lt;/type&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span style="color:#268bd2">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您之前用的是 &lt;code>org.apache.dubbo:dubbo&lt;/code> 依赖，请升级到以下版本（如果项目中还有其它 dubbo 子模块依赖，请一并升级版本号）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果之前的应用是 Spring Boot，建议使用以下 starter 依赖方式并升级到最新版本（如果之前未使用 starter，请删除所有老的 dubbo 模块依赖，直接使用以下配置即可）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-spring-boot-starter&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Dubbo3 相关的 Spring、Spring Boot 版本升级说明&lt;/h4>
&lt;p>Dubbo3 支持的 Spring、Spring Boot 版本兼容范围非常广：&lt;/p>
&lt;ul>
&lt;li>既支持 Spring 3.x ~ Spring 5.x 相关版本，同时也支持 Spring Boot 1.x ~ Spring Boot 2.x 版本。如果遇到应用无法升级高版本 Spring、Spring Boot 的情况下，可排掉 &lt;code>dubbo-spring-boot-starter&lt;/code> 或 &lt;code>dubbo&lt;/code> 中传递的高版本 Spring 依赖，指定项目可接受的 Spring 版本依赖即可。&lt;/li>
&lt;li>Spring Boot 3.x 和 Spring 6 版本由于需要 JDK 17 及以上版本，请参考 &lt;a href="">Dubbo Spring Boot 手册&lt;/a> 了解详情。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="步骤二升级其它组件依赖">步骤二：升级其它组件依赖&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Nacos 注册中心&lt;/p>
&lt;p>如果您使用的是 Nacos 注册中心，在升级到 Dubbo3 之前，请先确保 Nacos Server 升级到 2.x 版本。除了 Nacos Server 之外，我们还需要升级应用侧的 Nacos Client 依赖。&lt;/p>
&lt;p>如果是 Spring Boot 应用，则可删除 nacos-client 依赖，直接使用 starter：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-nacos-spring-boot-starter&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您当前不是 Spring Boot 应用，则直接更新 nacos-client 到 2.x 即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>nacos-client&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;version&amp;gt;&lt;/span>2.3.0&lt;span style="color:#268bd2">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Zookeeper 注册中心&lt;/p>
&lt;p>如果是 Spring Boot 应用，则可删除之前老的 Zookeeper 相关依赖，直接使用 starter：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-zookeeper-curator5-spring-boot-starter&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，以上 &lt;code>dubbo-zookeeper-curator5-spring-boot-starter&lt;/code> 请搭配 Zookeeper Server 3.8.0+ 版本使用。如果您当前正在使用的 Zookeeper Server 版本是 3.4.x 版本，则使用以下 starter：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-zookeeper-spring-boot-starter&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不是 Spring Boot 应用，则可以使用以下依赖（推荐，需确保 Zookeeper Server 3.8.0 版本及以上）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-dependencies-zookeeper-curator5&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者（对于 Zookeeper Server 3.4.x 版本用户）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-dependencies-zookeeper&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Zookeeper升级注意事项&lt;/h4>
&lt;pre>&lt;code>请注意在使用以上方式管理 zookeeper 客户端依赖时，请清理项目中的其它 zookeper、curator 等依赖，完全使用 dubbo 提供的版本。
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>其它组件升级&lt;/p>
&lt;p>除了注册中心之外，如果您有用到 Dubbo 的其它特性并且依赖第三方组件支持此特性，则您需要根据具体情况升级相应的组件版本，以确保组件能配合 Dubbo3 工作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">查看依赖的三方组件版本&lt;/h4>
目的是确认项目中的三方依赖可以与 Dubbo3 正常工作（保持API兼容性）。正常来说，Dubbo 应用中并不会有非常多的第三方组件依赖，所以只要按需确认即可，另外，您可以参考 &lt;a href="">Dubbo3 版本依赖的组件版本&lt;/a> 确认合适的组件版本。
&lt;/div>
&lt;h3 id="步骤三兼容性检查">步骤三：兼容性检查&lt;/h3>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">哪些用户需要做兼容性检查&lt;/h4>
对于大部分常规用户来说，可以跳过这个环节，通常是当前对 Dubbo 有深度定制的用户需要关注（SPI 扩展或源码定制）！
&lt;/div>
&lt;h4 id="检查点一是否有-spi-扩展">检查点一：是否有 SPI 扩展&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>以下 SPI 扩展点在 Dubbo3 中已被移除，如有使用请注意：&lt;/p>
&lt;ul>
&lt;li>事件总线。出于事件管理的复杂度原因，EventDispatcher 和 EventListener 在 Dubbo 3.x 的支持已经删除。如果有对应扩展机制的使用请考虑重构为对应 Dubbo 功能的扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>以下 SPI 扩展点的内部工作机制做了实现优化，可按需调整：&lt;/p>
&lt;ul>
&lt;li>Filter 拦截器机制。可以基于 Filter 拦截器对请求进行拦截处理，在 2.7 中支持在路由选址后再对请求进行拦截处理。Dubbo3 中新增了 &lt;code>ClusterFilter&lt;/code> SPI 定义，相比于之前的 &lt;code>Filter&lt;/code> 扩展点，&lt;code>ClusterFilter&lt;/code> 可以在很大程度上降低内存的占用，对与超大规模集群有较大的收益。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>如果您有一些 Consumer 侧的拦截器是基于 Filter 扩展实现的，如果没有和远端的 IP 地址强绑定的逻辑，我们建议您将对应的 &lt;code>org.apache.dubbo.rpc.Filter&lt;/code> SPI 扩展点迁移到 &lt;code>org.apache.dubbo.rpc.cluster.filter.ClusterFilter&lt;/code> 这个新的 SPI 扩展点。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">警告&lt;/h4>
&lt;code>org.apache.dubbo.rpc.Filter&lt;/code> 与 &lt;code>org.apache.dubbo.rpc.cluster.filter.ClusterFilter&lt;/code> 在 Dubbo3 中同时支持，ClusterFilter 适配可按需调整，之前老的 Filter 实现都会继续生效，无需担心。
&lt;/div>
&lt;h4 id="检查点二是否存在源码定制">检查点二：是否存在源码定制&lt;/h4>
&lt;p>如果您正在使用的 Dubbo 框架包含一些私有源码定制（通过 javagent 或者 asm 等通过运行时对 Dubbo 的修改也在此范围内），则直接升级到开源 Dubbo3 版本可能有兼容性风险。对于这种非标准行为，Dubbo 无法保证其先前的兼容性，需要用户在升级前对所有源码修改进行检查，确保这部分内容完成对 Dubbo3 版本的适配后再升级上线。&lt;/p>
&lt;blockquote>
&lt;p>此类问题可通过一些字节码层面的工具实现，如将进程 metaspace 内容遍历导出，过滤出 Dubbo 所有相关类及调用，以识别业务中、二方包中等直接依赖或增强 Dubbo 框架内部源码的位置。判断这些源码调用在 Dubbo3 内部是否仍然存在，以决策下一步升级动作。&lt;/p>
&lt;/blockquote>
&lt;h3 id="步骤四上线验证">步骤四：上线验证&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>灰度发布
Dubbo 3 升级对于发布流程没有做特殊限制，按照正常业务发布即可。
由于 Dubbo 是进行跨大版本的变更升级，发布中请尽可能多分批次发布，同时拉大第一批和第二批发布的时间间隔，做好充足的观察。
发布过程中，我们建议您先升级应用的下游（也即是服务提供者），在验证服务处理正常以后再继续后续发布。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>观测应用指标
在发布的过程中，有以下几个纬度的指标可以判断升级是否出现问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>机器的 CPU、内存使用情况&lt;/li>
&lt;li>接口请求成功率&lt;/li>
&lt;li>接口请求 RT&lt;/li>
&lt;li>日志的报错信息&lt;/li>
&lt;li>自定义扩展行为是否符合预期&lt;/li>
&lt;/ul>
&lt;h2 id="26x-及以下版本升级-dubbo3">2.6.x 及以下版本升级 Dubbo3&lt;/h2>
&lt;p>以下内容是针对 2.6.x、2.5.x 及以下版本用户的，帮助了解如何升级到 Dubbo3 版本。对于这些版本的用户而言，80% 的用户都是可以通过替换依赖实现平滑升级的，按以下步骤升级并做好检查即可。&lt;/p>
&lt;h3 id="步骤一升级核心依赖-1">步骤一：升级核心依赖&lt;/h3>
&lt;p>首先，必须升级之前老的 &lt;code>com.alibaba:dubbo&lt;/code> 依赖坐标升级为 &lt;code>org.apache.dubbo:dubbo&lt;/code>。&lt;/p>
&lt;p>如下所示，将 &lt;code>com.alibaba:dubbo&lt;/code> 依赖&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;version&amp;gt;&lt;/span>2.6.5&lt;span style="color:#268bd2">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>替换为 &lt;code>org.apache.dubbo:dubbo&lt;/code> 依赖，其它配置文件不用修改，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dubbo.version&amp;gt;&lt;/span>3.3.0&lt;span style="color:#268bd2">&amp;lt;/dubbo.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-dependencies-bom&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;version&amp;gt;&lt;/span>${dubbo.version}&lt;span style="color:#268bd2">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span style="color:#268bd2">&amp;lt;/type&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span style="color:#268bd2">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您是 Spring Boot 应用，则也可以使用 &lt;code>org.apache.dubbo:dubbo-spring-boot-starter&lt;/code> 替换上面的 &lt;code>org.apache.dubbo:dubbo&lt;/code> 依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.dubbo&lt;span style="color:#268bd2">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;artifactId&amp;gt;&lt;/span>dubbo-spring-boot-starter&lt;span style="color:#268bd2">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="步骤二升级其它组件依赖-1">步骤二：升级其它组件依赖&lt;/h3>
&lt;p>您需要升级注册中心（Nacos、Zookeeper或其它）等第三方组件，具体升级方法和目标版本请参考本文前面一节的 &lt;a href="./#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%8D%87%E7%BA%A7%E5%85%B6%E5%AE%83%E7%BB%84%E4%BB%B6%E4%BE%9D%E8%B5%96">2.7.x 版本升级到 Dubbo3&lt;/a> 中的详细说明，两者操作方法完全一样。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">请务必注意第三方组件的版本&lt;/h4>
&lt;ul>
&lt;li>对于很多 Dubbo 2.6.x 及以下的老用户来说，可能用到的组件（如注册中心）都是比较老的版本，这时升级到 Dubbo3 之前请仔细分析一下都有哪些功能和核心依赖组件，以评估组件升级到的目标版本。&lt;/li>
&lt;li>对于部分 Zookeeper 用户而言，如果 Zookeeper 版本较老，建议先升级 Zookeeper Server 到 3.8.x 及以上版本，再使用 Dubbo3 的 &lt;code>dubbo-zookeeper-curator5-spring-boot-starter&lt;/code> 管理依赖，如上文 &lt;a href="./#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%8D%87%E7%BA%A7%E5%85%B6%E5%AE%83%E7%BB%84%E4%BB%B6%E4%BE%9D%E8%B5%96">2.7.x 升级&lt;/a> 一节中所述。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="步骤三兼容性检查-1">步骤三：兼容性检查&lt;/h3>
&lt;p>如果升级依赖后出现API或SPI扩展相关的编译错误，请参考下文。如果您的 Dubbo 用法中有很多 SPI 扩展实现、内部 API 调用、或者改了一些内核源码，则需要重点关注这一部分的兼容性检查。&lt;/p>
&lt;h4 id="检查点一包名改造">检查点一：包名改造&lt;/h4>
&lt;p>Dubbo3 与 2.6.x 及以下版本最大的一个区别就是坐标、包名的变化：&lt;/p>
&lt;ol>
&lt;li>Maven 坐标 GAV&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>groupId 由 &lt;code>com.alibaba&lt;/code> 改为 &lt;code>org.apache.dubbo&lt;/code>&lt;/strong>&lt;/p>
&lt;ol start="2">
&lt;li>package&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>package 前缀由 &lt;code>com.alibaba.dubbo.*&lt;/code> 改为 &lt;code>org.apache.dubbo.*&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Maven坐标升级比较直观，只需要修改相应的pom文件就可以了；而package变更则可能会带来编译问题，但好在 Dubbo3 版本继续保留了绝大部分常用基础 API 和 SPI 的 &lt;code>com.alibaba.dubbo&lt;/code> 适配支持，因此理论上升级 pom 后项目仍可直接编译成功。&lt;/p>
&lt;h4 id="检查点二api编程接口">检查点二：API编程接口&lt;/h4>
&lt;ul>
&lt;li>注解&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注解&lt;/th>
&lt;th>推荐的新注解&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@Reference&lt;/td>
&lt;td>@DubboReference&lt;/td>
&lt;td>消费端服务引用注解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Service&lt;/td>
&lt;td>@DubboService&lt;/td>
&lt;td>提供端服务暴露注解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@EnableDubbo&lt;/td>
&lt;td>@EnableDubbo&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>其他常用Spring注解API&lt;/td>
&lt;td>其他常用Spring注解API&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>编程API&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ReferenceConfig&lt;/td>
&lt;td>Service配置采集和引用编程接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ServiceConfig&lt;/td>
&lt;td>Service配置采集和暴露编程接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ApplicationConfig&lt;/td>
&lt;td>Application配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RegistryConfig&lt;/td>
&lt;td>注册中心配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ConsumerConfig&lt;/td>
&lt;td>消费端默认配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ProviderConfig&lt;/td>
&lt;td>提供端默认配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ProtocolConfig&lt;/td>
&lt;td>RPC协议配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ArgumentConfig&lt;/td>
&lt;td>服务参数级配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MethodConfig&lt;/td>
&lt;td>服务方法级配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ModuleConfig&lt;/td>
&lt;td>服务治理Module配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MonitorConfig&lt;/td>
&lt;td>监控配置采集API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RpcContext&lt;/td>
&lt;td>编程上下文API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="检查点三spi扩展">检查点三：SPI扩展&lt;/h4>
&lt;p>如果公司内部有维护的自定义SPI扩展库，在业务工程升级到 Dubbo3 上线之前，请务必先确保扩展库与 Dubbo3 的兼容性。如果发现有兼容性问题，建议通过修改包名引用的方式（从实现 &lt;code>com.alibaba.dubbo.*&lt;/code> 包名类到实现 &lt;code>org.apache.dubbo.*&lt;/code> 包名类 ）完成升级，并重新打包。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>SPI扩展点&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Registry&lt;/td>
&lt;td>包括&lt;code>RegistryFactory&lt;/code>, &lt;code>Registry&lt;/code> ,&lt;code>RegistryService&lt;/code>等扩展点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Protocol&lt;/td>
&lt;td>RPC协议扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Serialization&lt;/td>
&lt;td>序列化协议扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cluster&lt;/td>
&lt;td>集群容错策略扩展，如Failover, Failfast等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Loadbalance&lt;/td>
&lt;td>负载均衡策略扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Transporter&lt;/td>
&lt;td>传输框架扩展，如Netty等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Monitor&lt;/td>
&lt;td>监控中心扩展，包括MonitorFactory, Monitor, MonitorService等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Router&lt;/td>
&lt;td>路由规则扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Filter&lt;/td>
&lt;td>拦截器扩展&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="步骤四上线验证-1">步骤四：上线验证&lt;/h3>
&lt;p>参考本文前面一节的 &lt;a href="./#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E4%B8%8A%E7%BA%BF%E9%AA%8C%E8%AF%81">2.7.x 版本升级到 Dubbo3&lt;/a> 中讲到的验证方法。&lt;/p></description></item><item><title>Overview: 升级到triple协议</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">请注意&lt;/h4>
&lt;ul>
&lt;li>本文档内容并不是升级 Dubbo3 必须的，您完全可以只升级框架并继续使用 dubbo 通信协议。&lt;/li>
&lt;li>如果您是 Dubbo 新用户，强烈建议直接 &lt;a href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocol/">使用 triple 协议&lt;/a> 即可。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>本文档适合服务已经运行在 dubbo 协议之上的老用户，请先参考上一篇文档 &lt;a href="../migration/">如何从 Dubbo2 升级到 Dubbo3&lt;/a> 完成框架版本升级，然后遵循以下步骤以最小改动平滑迁移到 triple 协议。&lt;/p>
&lt;p>以下是协议升级的架构图，展示了平滑升级过程中不同 Dubbo 应用的状态：&lt;/p>
&lt;img alt="dubbo协议迁移到tirple协议" style="max-width:800px;height:auto;" src="https://dubbo.apache.org/imgs/v3/manual/java/migration/dubbo-to-triple.png"/>
&lt;p>按先后顺序，升级基本步骤如下：&lt;/p>
&lt;ol>
&lt;li>Provider 提供者侧配置单端口双协议（dubbo、triple）发布&lt;/li>
&lt;li>Provider 提供者侧配置首选协议为 triple（此时，提供者注册的URL地址为 &lt;code>dubbo://host:port/DemoService?preferred-protocol=tri&lt;/code>）&lt;/li>
&lt;li>Consumer 消费者升级，根据情况不同有以下两种方式：
&lt;ul>
&lt;li>升级消费者到 3.3 版本，消费者会根据 &lt;code>preferred-protocol=tri&lt;/code> 优先调用 triple 协议&lt;/li>
&lt;li>无法升级到 3.3 版本的消费者应用，可以配置 &lt;code>@DubboReference(protocol=&amp;quot;tri&amp;quot;)&lt;/code> 调用 triple 协议&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>推动所有应用升级到最新 Dubbo3 版本，最终所有流量都是 triple 协议&lt;/li>
&lt;/ol>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">请注意&lt;/h4>
请注意，以上提到的单端口多协议、识别 &lt;code>preferred-protocol&lt;/code> 首选协议等功能，需要 Dubbo 3.3.0+ 版本！
&lt;/div>
&lt;h3 id="步骤一提供者双协议发布">步骤一：提供者双协议发布&lt;/h3>
&lt;p>假设我们有以下应用配置，即在 20880 端口发布 dubbo 协议：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">protocol&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: &lt;span style="color:#2aa198">20880&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们需要增加两个配置项，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">protocol&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: dubbo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">port&lt;/span>: &lt;span style="color:#2aa198">20880&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">ext-protocol&lt;/span>: tri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">preferred-protocol&lt;/span>: tri
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;/p>
&lt;ul>
&lt;li>&lt;code>ext-protocol: tri&lt;/code> 指定在原 20880 端口上额外发布 triple 协议，即单端口双协议发布。&lt;/li>
&lt;li>&lt;code>preferred-protocol: tri&lt;/code> 会随注册中心同步到 Consumer 侧，告诉 consumer 优先使用 triple 协议调用&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;code>preferred-protocol: tri&lt;/code> 配置仅在 3.3.0 及之后版本支持，所以即使 provider 配置了这个选项，对于 3.3.0 版本即之前的 consumer 消费端并不会生效，还是会调用 dubbo 协议。
&lt;/div>
&lt;h3 id="步骤二消费端切换协议">步骤二：消费端切换协议&lt;/h3>
&lt;p>提供端完成步骤一配置并重启后，消费端根据版本与配置不同，可能处于以下三种状态之一：&lt;/p>
&lt;p>&lt;strong>1. 消费端是 3.3.0 及之后版本&lt;/strong>&lt;/p>
&lt;p>此类消费端会自动识别提供者 url 上的 &lt;code>preferred-protocol: tri&lt;/code> 标记，如果发现此标记，则消费端自动使用 triple 协议调用服务，否则继续使用 dubbo 协议。&lt;/p>
&lt;p>&lt;strong>2. 消费端是 2.x 或 3.3.0 之前版本&lt;/strong>&lt;/p>
&lt;p>由于低版本 Dubbo 框架不能识别 &lt;code>preferred-protocol: tri&lt;/code> 参数，因此这部分消费者不受提供者端多协议发布的任何影响，继续调用 dubbo 协议。&lt;/p>
&lt;p>&lt;strong>3. 消费端是 2.x 或 3.3.0 之前版本，且额外指定要调用的协议&lt;/strong>&lt;/p>
&lt;p>与第 2 种情况基本一致，只是这时用户可以明确的为某些服务指定使用哪种 rpc 协议，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">@DubboReference&lt;/span>(protocol&lt;span style="color:#719e07">=&lt;/span>&lt;span style="color:#2aa198">&amp;#34;tri&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">private&lt;/span> DemoService demoService;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:reference&lt;/span> protocol=&lt;span style="color:#2aa198">&amp;#34;tri&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在配置了 &lt;code>protocol=&amp;quot;tri&amp;quot;&lt;/code> 后，服务的调用会使用 triple 协议。需要注意的是，在配置 &lt;code>protocol=&amp;quot;tri&amp;quot;&lt;/code> 之前，一定要确保提供端已经发布了 triple 协议支持，否则调用将会失败。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;ul>
&lt;li>从以上三种情况可知，协议升级过程对消费端完全无感，消费端不会因提供端的多协议配置而出现任何通信障碍。&lt;/li>
&lt;li>对于消费端，最简单的协议切换方式就是通过 &lt;code>preferred-protocol=tri&lt;/code> 进行自动切换，需要两边版本都升级到 3.3.0+ 才支持。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="步骤三完全收敛到triple协议">步骤三：完全收敛到triple协议&lt;/h3>
&lt;p>步骤一、二操作起来非常简单，并且保证了过程平滑，通过单端口双协议、消费端自动切换保证了整个升级过程的平滑。&lt;/p>
&lt;p>平滑升级意味着我们要经历一个中间态，即在某一段时间内，集群内 dubbo 协议、triple 协议共存（有些服务间通信是dubbo协议、有些服务间通信是triple协议）。如何才能推进达成终态目标那，即所有服务调用都使用 triple 协议？我们推荐使用以下两种方式达成目标：&lt;/p>
&lt;ul>
&lt;li>推进集群内所有 Dubbo 应用都升级到 3.3.x 最新版本，这样消费端就能自动切换到 triple 协议&lt;/li>
&lt;li>通过 Dubbo 框架的指标埋点，观察某个应用（作为provider）是否仍在处理 dubbo 流量，对这部分应用的上下游进行治理&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
对于 Dubbo 框架而言，集群内 dubbo 协议和 triple 协议共存的状态并不存在任何技术问题，不同的服务调用使用不同协议也很正常，因此双协议共存的中间态是完全可以接受的。但有时候为了整体方案统一，我们可能需要达成单一通信协议的终态目标。
&lt;/div></description></item><item><title>Overview: 升级到应用级服务发现</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">请注意&lt;/h4>
&lt;ul>
&lt;li>本文档内容并不是升级 Dubbo3 必须的，您完全可以只升级框架并使用 &lt;a href="zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery/#%E5%90%AF%E7%94%A8%E5%BA%94%E7%94%A8%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0">框架的服务发现默认行为&lt;/a>。&lt;/li>
&lt;li>本文档更适用于 Dubbo2 老用户，用于了解在升级到 Dubbo3 版本后，框架中的服务发现模型切换过程与工作原理。新用户请直接 &lt;a href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos/#13-%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%90%AF%E7%94%A8-nacos">配置启用应用级服务发现&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>对于 Dubbo2 老用户而言，在升级 Dubbo3 时有以下两个选择，而决策的考虑因素仅有一个：性能。&lt;/p>
&lt;ol>
&lt;li>如果您的集群规模不算大，之前使用 Dubbo2 未遇到任何地址推送等性能问题，完全可以继续使用接口级别服务发现&lt;/li>
&lt;li>如果您集群规模较大，之前使用 Dubbo2 遇到服务发现负载飙高等问题，则建议迁移到新的应用级服务发现&lt;/li>
&lt;/ol>
&lt;p>基于以上决策结论，请在升级 Dubbo3 框架时调整以下配置。&lt;/p>
&lt;h2 id="继续使用接口级服务发现">继续使用接口级服务发现&lt;/h2>
&lt;p>在升级到 Dubbo3 框架时，您需要调整应用配置如下，（仅仅是一个配置项调整，提供者应用必须配置、消费者应用可选）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:application&lt;/span> name=&lt;span style="color:#2aa198">&amp;#34;xxx&amp;#34;&lt;/span> register-mode=&lt;span style="color:#2aa198">&amp;#34;interface&amp;#34;&lt;/span>&lt;span style="color:#268bd2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">application&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">name&lt;/span>: xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">register-mode&lt;/span>: interface &lt;span style="color:#586e75">#表示继续使用老版本服务发现模型，可选值 interface、instance、all&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者，以上是全局默认配置，可以根据每个注册中心来单独配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:registry&lt;/span> address=&lt;span style="color:#2aa198">&amp;#34;nacos://localhost:8848&amp;#34;&lt;/span> register-mode=&lt;span style="color:#2aa198">&amp;#34;interface&amp;#34;&lt;/span>&lt;span style="color:#268bd2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">dubbo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">registry&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">address&lt;/span>: nacos://localhost:8848
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">register-mode&lt;/span>: interface &lt;span style="color:#586e75">#表示继续使用老版本服务发现模型，可选值 interface、instance、all&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启用应用级服务发现默认">启用应用级服务发现(默认)&lt;/h2>
&lt;p>对于老用户而言，如果要启用应用级服务发现，就需要一个平滑迁移的过程。这时需要让新升级的 Dubbo3 应用进行双注册双订阅（当前框架默认行为，因此用户无需修改任何配置，以下内容均会自行发生，注意：未来版本可能切换为应用级单注册单订阅），以确保新老服务发现模型都能兼顾。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">请注意&lt;/h4>
对于新用户而言，可以直接配置 &lt;code>dubbo.application.register-mode=instance&lt;/code>，即在一开始就配置仅使用应用级服务发现。
&lt;/div>
&lt;h3 id="提供者端注册行为">提供者端注册行为&lt;/h3>
&lt;p>在默认情况下，Dubbo3 框架会同时注册接口级、应用级两种服务发现地址，因此，集群中的新老应用都能够正常的发现改应用地址，并正常发起调用。如下图所示：&lt;/p>
&lt;img alt="dubbo应用级服务发现" style="max-width:800px;height:auto;" src="https://dubbo.apache.org/imgs/v3/migration/provider-registration.png"/>
&lt;h3 id="消费者端订阅行为">消费者端订阅行为&lt;/h3>
&lt;p>在默认情况下，Dubbo3 框架具备同时发现 Dubbo2 与 Dubbo3 地址列表的能力。在默认情况下，如果集群中存在可以消费的 Dubbo3 的地址，将自动消费 Dubbo3 的地址，如果不存在新地址则自动消费 Dubbo2 的地址（Dubbo3 提供了开关来控制这个行为），具体如下图所示：&lt;/p>
&lt;img alt="dubbo应用级服务发现" style="max-width:800px;height:auto;" src="https://dubbo.apache.org/imgs/v3/migration/consumer-subscription.png"/>
&lt;h3 id="状态收敛">状态收敛&lt;/h3>
&lt;p>关于以上双注册、双订阅行为的更多详细解释，以及如何尽快完成服务发现模型的收敛，请参考博客文章 &lt;a href="https://dubbo.apache.org/zh-cn/blog/2024/05/13/%E5%A6%82%E6%9E%9C%E4%BB%8E%E6%8E%A5%E5%8F%A3%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%B9%B3%E6%BB%91%E8%BF%81%E7%A7%BB%E5%88%B0%E5%BA%94%E7%94%A8%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/">Dubbo3 服务发现平滑迁移步骤与原理&lt;/a>。&lt;/p></description></item><item><title>Overview: 版本变更记录</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/</guid><description/></item></channel></rss>