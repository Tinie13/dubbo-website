<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – Golang SDK</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/</link><description>Recent content in Golang SDK on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 版本信息</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/versions/</guid><description>
&lt;h2 id="推荐版本">推荐版本&lt;/h2>
&lt;p>当前网站文档适用于以下版本，如果您正使用 dubbo-go 其他版本，请参考对应历史版本文档。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Go&lt;/th>
&lt;th>Dubbo-go&lt;/th>
&lt;th>protoc-gen-go-triple&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1.20&lt;/td>
&lt;td>v3.2.0-rc1（当前文档）&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>当前最新稳定版本，推荐使用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="历史版本">历史版本&lt;/h2>
&lt;h3 id="3x">3.x&lt;/h3>
&lt;p>查看 3.1.x 及之前版本文档：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Go&lt;/th>
&lt;th>Dubbo-go&lt;/th>
&lt;th>protoc-gen-go-triple&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.1.1&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.1.0&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.4&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.3&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.2&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.1&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/protoc-gen-go-triple/" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>请参考 README 说明，了解如何生成老版本兼容的服务 stub 代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.0&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/dubbogo-cli" target="_blank">v1.0.5&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.0-rc4-1&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/dubbogo-cli" target="_blank">v1.0.2&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1.16&lt;/td>
&lt;td>&lt;a href="" target="_blank">v3.0.0-rc3&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://github.com/dubbogo/dubbogo-cli" target="_blank">v1.0.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="1x">1.x&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Go&lt;/th>
&lt;th>Dubbo-go&lt;/th>
&lt;th>Triple&lt;/th>
&lt;th>protoc-gen-go-triple&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td>v1.5.0&lt;/td>
&lt;td>v1.1.8&lt;/td>
&lt;td>v1.0.8&lt;/td>
&lt;td>停止维护，请升级到最新 3.x 版本&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Overview: 框架介绍</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/introduction/</guid><description>
&lt;h2 id="什么是-dubbo-go">什么是 dubbo-go&lt;/h2>
&lt;p>Dubbo-go 是 Apache Dubbo 的 go 语言实现，它完全遵循 Apache Dubbo 设计原则与目标，是 go 语言领域的一款优秀微服务开发框架。dubbo-go 提供：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>API 与 RPC 协议&lt;/strong>：帮助解决组件之间的 RPC 通信问题，提供基于 HTTP/1/2 的通信协议、streaming流式通信模型。&lt;/li>
&lt;li>&lt;strong>丰富的微服务治理能力&lt;/strong>：解决地址发现、流量管控、可观测性、全链路追踪、日志等微服务整体解决方案。&lt;/li>
&lt;/ul>
&lt;h2 id="概念与架构">概念与架构&lt;/h2>
&lt;p>以下是 dubbo-go 的整体架构图：
&lt;img src="https://dubbo.apache.org/imgs/golang/architecture/arc.png" alt="dubbo-go architecture">&lt;/p>
&lt;p>dubbo-go 总体上遵循 &lt;code>框架内核+插件&lt;/code> 的的设计理念，左侧的 &lt;code>框架内核&lt;/code> 定义了 dubbo-go 作为微服务框架的一些核心概念，右侧的 &lt;code>插件&lt;/code> 部分则提供了核心概念扩展实现。&lt;/p>
&lt;p>&lt;code>框架内核&lt;/code> 可分为 4 个层次，从上到下依次为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>API 层：dubbo-go 同时支持基于 IDL、interface/struct 的服务契约定义，兼顾跨语言与易用性诉求；支持基于纯 yaml 文件的微服务配置模式；提供了同步、异步、单次(unary)、流式(streaming) 等 RPC 通信与编码模型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务治理层：dubbo-go 内置了多维度的服务治理能力抽象，确保满足微服务开发与集群治理的核心诉求，这包括地址发现（Service Discovery）、负载均衡（Load Balancing）、可观测指标（Metrics）、流量管控（Traffic Management）、全链路追踪（Tracing）等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RPC 协议层：dubbo-go 实现的最核心的 RPC 协议是 - triple 协议，triple 可同时工作在 http1/2 之上 (支持 CURL 直接访问)，兼容 gRPC；从设计上，dubbo-go 还提供了多协议发布服务的支持，你可以在一个进程内同时发布 triple、dubbo2、rest、jsonRPC 等多种不同通信协议的服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传输层：支持 HTTP1/2、TCP 传输层，兼顾性能与通用性，同时支持多种序列化方式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>插件&lt;/code> 体系极大的丰富了 dubbo-go 功能与生态，社区内置提供了大量的内置扩展实现，同时，开发者可以非常容易的根据需求增加扩展实现。以下是一些典型的插件定义：&lt;/p>
&lt;ul>
&lt;li>Protocol：dubbo-go 基于 protocol 插件内置提供了 triple、dubbo2、rest 等协议支持，通过扩展 protocol 可以为 dubbo-go 扩展更多协议&lt;/li>
&lt;li>Service Discovery：支持 Nacos、Zookeeper、Polaris 等主流注册中心集成&lt;/li>
&lt;li>Traffic Management：dubbo-go 支持 Dubbo 体系定义的流量规则，可以实现在运行期动态的调整服务行为如超时时间、重试次数、限流参数等，通过控制流量分布可以实现 A/B 测试、金丝雀发布、多版本按比例流量分配、条件匹配路由、黑白名单等&lt;/li>
&lt;li>Metrics：提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合&lt;/li>
&lt;li>Logging：提供通用的日志采集接口定义，内置 Zap、Logrus 支持&lt;/li>
&lt;li>Tracing：提供分布式链路追踪能力，通过此插件扩展可接入 Zipkin、Jaeger、Skywalking 等链路追踪系统。&lt;/li>
&lt;/ul>
&lt;p>下图是从内核源码视角，给出的框架核心组件以及组件之间的关联关系：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/docs3-v2/golang-sdk/concept/more/app_and_interface/dubbogo-concept.png" alt="img">&lt;/p>
&lt;h3 id="rpc">RPC&lt;/h3>
&lt;h4 id="triple">Triple&lt;/h4>
&lt;p>基于 Dubbo 定义的 &lt;a href="https://dubbo.apache.org/zh-cn/overview/reference/protocols/triple/">triple 协议&lt;/a>，你可以轻松编写浏览器、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。作为 Apache Dubbo 多语言 RPC体系的一环，dubbo-go 提供了 triple 协议的完整实现，支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。triple 协议让 dubbo-go 可以：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>作为后端服务与 Dubbo 其他语言实现互通&lt;/strong>&lt;/li>
&lt;li>&lt;strong>接收浏览器等标准 http 工具发起的请求&lt;/strong>&lt;/li>
&lt;li>&lt;strong>与标准的 gRPC 体系互通&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/golang/architecture/language.png" alt="dubbo多语言实现">&lt;/p>
&lt;p>请参考以下链接了解更多 dubbo-go 跨语言或跨产品的互通细节：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="../tutorial/interop-dubbo/">与 Dubbo 其他多语言体系互通 - 基于 triple+protobuf&lt;/a>&lt;/li>
&lt;li>&lt;a href="../tutorial/interop-dubbo">与 Dubbo2 Java互通 - 基于 dubbo2+hessian2&lt;/a>&lt;/li>
&lt;li>&lt;a href="../tutorial/interop-grpc">与 gRPC 体系互通&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="多协议支持">多协议支持&lt;/h4>
&lt;p>除了 triple 协议之外，dubbo-go 支持更多的 RPC 协议和序列化方式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>协议&lt;/th>
&lt;th>协议名 (用于配置)&lt;/th>
&lt;th style="text-align:center">序列化方式&lt;/th>
&lt;th>默认序列化方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Triple 【推荐】&lt;/td>
&lt;td>tri&lt;/td>
&lt;td style="text-align:center">pb/json/自定义&lt;/td>
&lt;td>pb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Dubbo&lt;/td>
&lt;td>dubbo&lt;/td>
&lt;td style="text-align:center">hessian2&lt;/td>
&lt;td>hessian2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jsonRPC&lt;/td>
&lt;td>jsonrpc&lt;/td>
&lt;td style="text-align:center">json&lt;/td>
&lt;td>json&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REST&lt;/td>
&lt;td>rest&lt;/td>
&lt;td style="text-align:center">json&lt;/td>
&lt;td>json&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="filter">Filter&lt;/h4>
&lt;p>如下图所示，filter 是一个类似 AOP 的请求拦截机制，每一次 RPC 请求都会被 filter 拦截&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/golang/architecture/filter.png" alt="dubbo多语言实现">&lt;/p>
&lt;p>我们可以在 filter 实现中完成比如请求拦截、记录、预处理、后处理的事情。dubbo-go 的一些核心能力，比如超时时间、访问日志(ccesslog)、metrtics 等都是基于内置 filter 实现的。&lt;/p>
&lt;h4 id="streaming">Streaming&lt;/h4>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/golang/architecture/streaming.png" alt="dubbo多语言实现">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Server streaming RPC：一次 server-streaming RPC 请求与 unary RPC 非常类似，不同之处在于，对于单次 client 请求 server 会返回一系列的流式响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Client streaming RPC：一次 client-streaming RPC 请求与 unary RPC 非常类似，不同之处在于，client 会发送一系列的流式请求到 server，最终 server 针对所有收到的请求返回一条响应信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bidirectional streaming RPC：在双向流式 RPC 请求中，请求首先由 client 端发起，server 在收到请求信息（方法名、metadata等）后，可以选择立即发送 metadata 作为响应，或者一直等到 client 进一步发起流式请求数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="服务治理">服务治理&lt;/h3>
&lt;p>dubbo-go 提供了完善的服务治理能力，包括地址发现、可观测、全链路追踪、流量管控等。你可以使用 dubbo-go 开发与管理微服务集群并实现与 Apache Dubbo 其他语言体系的互通。&lt;/p>
&lt;h4 id="地址发现">地址发现&lt;/h4>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/architecture.png" alt="img">&lt;/p>
&lt;p>Dubbo-go 支持的注册中心类型如下，具体配置方式请参考使用教程 &lt;a href="../tutorial/service-discovery/">地址发现&lt;/a>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注册中心&lt;/th>
&lt;th>注册中心名（用于配置）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Zookeeper&lt;/td>
&lt;td>zookeeper&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nacos&lt;/td>
&lt;td>nacos&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Etcd&lt;/td>
&lt;td>etcd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Polaris&lt;/td>
&lt;td>polaris&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="可观测">可观测&lt;/h4>
&lt;p>dubbo-go 的可视化指标采集遵循 Apache Dubbo 定义的 &lt;a href="https://dubbo.apache.org/zh-cn/overview/reference/Metrics/standard_metrics/">metrics 指标规范&lt;/a>。在实现 metrics 指标采集后，接下来就是如何可视化展示的问题，当前最常用的式导出到 Prometheus 并通过 Grafana 实现数据可视化展示。&lt;/p>
&lt;p>具体启用方式请参考使用手册中的 &lt;a href="../tutorial/observability/">可视化观测&lt;/a>。&lt;/p>
&lt;h4 id="全链路追踪">全链路追踪&lt;/h4>
&lt;p>dubbo-go 支持通过 Open Telemetry 接入 Zipkin、Jaeger、Skywalking 等全链路追踪系统。&lt;/p>
&lt;p>具体启用方式请参考使用手册中的 &lt;a href="../tutorial/tracing/">全链路追踪&lt;/a>。&lt;/p>
&lt;h4 id="流量管控">流量管控&lt;/h4>
&lt;p>dubbo-go 实现的流量治理规则完全遵循 Dubbo 框架设计的流量治理能力，可以通过以下链接了解更多详情：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dubbo.apache.org/zh-cn/overview/core-features/traffic/">Dubbo 流量治理规则设计&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dubbo.apache.org/zh-cn/overview/tasks/traffic-management/">Dubbo 流量治理示例任务&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Overview: 快速开始</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/quickstart/</guid><description/></item><item><title>Overview: 使用教程</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/</guid><description/></item><item><title>Overview: 参考手册</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/</guid><description/></item></channel></rss>